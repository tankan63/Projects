%Load Data e.g: rows 1&2 contain exam scores and third contains label

data = load('datafile.txt');
X=data(:, [1,2]); y=data(:,3);

% function plotData(X,y) {
	figure; hold on;
	pos = find(y==1); neg = find(y==0);
	plot(X(pos,1), X(pos,2), 'k+', 'LineWidth',2, 'MarkerSize',7);
	plot(X(neg,1), X(neg,2), 'ko', 'MarkerFaceColor', 'y','MarkerSize',7)
}

%Now plot the data
plotData(X,y);
xlabel('Exam 1 score');
ylabel('Exam 2 score');
legend('Admitted', 'Rejected');

%Sigmoid function
% function g = sigmoid(z) {
	g = zeros(size(z));
	g  =  1./(1 + exp(-1*z));
}

sigmoid(0.6)  %value will be closer to 1
sigmoid(-1.2) %value will be closer to 0

%Now define a cost function
% function [J, grad] = costFunction(theta, X, y) {
	m = length(y);
	J = 0;
	grad = zeros(size(theta));

	J = (-1 / m) * (y.*log(sigmoid(X * theta)) + (1 - y).*log(1 - sigmoid(X * theta)));
	temp = sigmoid(X * theta);
	error = (temp - y);
	grad = (1 / m) * (X' * error);
}
 
[m, n] = size(X);
X = [ones(m,n) X];
initial_theta = zeros(n+1, 1);

[cost, grad] = costFunction(initial_theta, X, y);
fprintf('Cost at theta is 0: %f\n', cost);
disp('Gradient at initial theta 0: ', disp(grad));

%fminumc() will return optimal theta
options = optimoptions(@fminunc, 'Algorithm', 'Quasi-Newton','GradObj','on', 'MaxIter', 400);
[theta, cost] = fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);
fprintf('Cost at theta found at: %f\n', cost);

disp('theta: ');disp(theta);

%plotdecisionboundary function data
%function plotDecisionBoundary(theta, X, y) {
	plotData(X(:,2:3), y);
	hold on

	if size(X, 2) <= 3
   	 % Only need 2 points to define a line, so choose two endpoints
    	plot_x = [min(X(:,2))-2,  max(X(:,2))+2];

    	% Calculate the decision boundary line
    	plot_y = (-1./theta(3)).*(theta(2).*plot_x + theta(1));

    	% Plot, and adjust axes for better viewing
    	plot(plot_x, plot_y)
    
    	% Legend, specific for the exercise
    	legend('Admitted', 'Not admitted', 'Decision Boundary')
    	axis([30, 100, 30, 100])
	else
   	 % Here is the grid range
    	u = linspace(-1, 1.5, 50);
    	v = linspace(-1, 1.5, 50);

    	z = zeros(length(u), length(v));
    	% Evaluate z = theta*x over the grid
    	for i = 1:length(u)
        	for j = 1:length(v)
            	z(i,j) = mapFeature(u(i), v(j))*theta;
        	end
    	end
    	z = z'; % important to transpose z before calling contour

    	% Plot z = 0
    	% Notice you need to specify the range [0, 0]
    	contour(u, v, z, [0, 0], 'LineWidth', 2)
	end
	hold off

	end
}
plotDecisionBoundary(theta, X, y);
hold on;
xlabel('Exam 1 scores');
ylabel('exam 2 scores');
legend('Admitted', 'Rejected');
hold off;

%prediciton function 
% function p = predict(theta, X) {
	m = size(X, 1);
	p = zeros(m, 1);
	p = sigmoid(X*theta);
}
prob = sigmoid([1 45 85]*theta);
fprintf('for a score of 45, 85 we predict the possibiity of admission at: %f\n', prob)
p = predict(theta, X);
fprintf('Train accuracy: %f\n', mean(double(p==y))*100);
